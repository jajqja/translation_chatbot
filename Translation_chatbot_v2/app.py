import streamlit as st
from typing import Dict, Optional
import PyPDF2
import io

# Import your chatbot
from chatbot import TranslationChatbot

# Page config
st.set_page_config(
    page_title="AI Translation Chatbot",
    page_icon="üåê",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
# Custom CSS for better styling
st.markdown("""
<style>
    /* Header v·ªõi gradient d·ªãu h∆°n v√† text ƒë·∫≠m */
    .main-header {
        text-align: center;
        padding: 2rem 0;
        background: linear-gradient(90deg, #8EC5FC 0%, #E0C3FC 100%);
        color: #2c2c2c;
        border-radius: 12px;
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 2rem;
    }
    
    .translation-container {
        border: 1px solid #d0d7de;
        border-radius: 12px;
        padding: 1.2rem;
        margin: 1.2rem 0;
        background-color: #fefefe;
        color: #1a1a1a; /* m√†u ch·ªØ ƒë·∫≠m, d·ªÖ ƒë·ªçc */
        box-shadow: 0 1px 4px rgba(0,0,0,0.05);
        font-size: 1.05rem;
        line-height: 1.6;
    }

    /* T·ª´ kh√≥a n·ªïi b·∫≠t */
    .keyword-badge {
        background-color: #f0f7ff;
        color: #1565c0;
        padding: 0.4rem 0.75rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        margin: 0.25rem;
        display: inline-block;
        border: 1px solid #bbdefb;
    }
    
    /* Th√¥ng tin ti·∫øn ƒë·ªô */
    .progress-info {
        background-color: #f1f8f4;
        border-left: 5px solid #43a047;
        padding: 1rem;
        margin: 1.5rem 0;
        border-radius: 8px;
        color: #2e7d32;
        font-weight: 500;
    }
    
    /* M·ªói ƒëo·∫°n chunk ƒë√£ d·ªãch */
    .chunk-container {
        background-color: #fcfcfc;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.75rem 0;
        box-shadow: 0 1px 3px rgba(0,0,0,0.03);
    }
</style>
""", unsafe_allow_html=True)


def read_file_content(uploaded_file) -> Optional[str]:
    """Read content from uploaded file"""
    try:
        file_type = uploaded_file.name.split(".")[-1].lower()
        if file_type in ["txt", "md"]:
            return str(uploaded_file.read(), "utf-8")

        elif file_type == "pdf":
            pdf_reader = PyPDF2.PdfReader(io.BytesIO(uploaded_file.read()))
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
            return text
        
        else:
            st.error("Unsupported file type!")
            return None
            
    except Exception as e:
        st.error(f"Error reading file: {str(e)}")
        return None

def display_keywords(keywords: Dict[str, str], title: str):
    """Display keywords in a nice format"""
    if keywords:
        st.markdown(f"**{title}:**")
        keyword_html = ""
        for en, vi in keywords.items():
            keyword_html += f'<span class="keyword-badge">{en} ‚Üí {vi}</span>'
        st.markdown(keyword_html, unsafe_allow_html=True)

def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üåê AI Translation Chatbot</h1>
        <p>D·ªãch thu·∫≠t th√¥ng minh t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát</p>
    </div>
    """, unsafe_allow_html=True)

    # Initialize session state
    if 'chatbot' not in st.session_state:
        st.session_state.chatbot = None
    if 'translation_history' not in st.session_state:
        st.session_state.translation_history = []

    # Sidebar for configuration
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        
        # Model settings
        model_option = st.selectbox(
            "M√¥ h√¨nh AI:",
            ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo"],
            index=0
        )
        
        temperature = st.slider(
            "Temperature:",
            min_value=0.0,
            max_value=2.0,
            value=1.0,
            step=0.1,
            help="ƒê·ªô s√°ng t·∫°o c·ªßa m√¥ h√¨nh (0 = ch√≠nh x√°c, 2 = s√°ng t·∫°o)"
        )
        
        chunk_size = st.slider(
            "K√≠ch th∆∞·ªõc chunk:",
            min_value=1000,
            max_value=20000,
            value=5000,
            step=1000,
            help="K√≠ch th∆∞·ªõc m·ªói ƒëo·∫°n vƒÉn ƒë·ªÉ d·ªãch"
        )
        
        domain = st.selectbox(
            "Lƒ©nh v·ª±c:",
            ["general", "technical", "medical", "legal", "business", "academic"],
            index=0
        )
        
        style = st.selectbox(
            "Phong c√°ch d·ªãch:",
            ["formal", "informal", "academic", "casual"],
            index=0
        )
        
        # Initialize chatbot button
        if st.button("üîÑ Kh·ªüi t·∫°o Chatbot", type="primary"):
            with st.spinner("ƒêang kh·ªüi t·∫°o chatbot..."):
                st.session_state.chatbot = TranslationChatbot(
                    llm_model=model_option,
                    temperature=temperature
                )
            st.success("Chatbot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!")
        
        # Predefined keywords
        st.subheader("üìù T·ª´ kh√≥a ƒë·ªãnh s·∫µn")
        keywords_input = st.text_area(
            "Nh·∫≠p t·ª´ kh√≥a (format: en:vi, m·ªói d√≤ng m·ªôt c·∫∑p):",
            placeholder="machine learning:h·ªçc m√°y\nartificial intelligence:tr√≠ tu·ªá nh√¢n t·∫°o",
            height=100
        )

    # Main content area
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìÑ VƒÉn b·∫£n g·ªëc")
        
        # Input method selection
        input_method = st.radio(
            "Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p:",
            ["Upload file", "Nh·∫≠p text tr·ª±c ti·∫øp"],
            horizontal=True
        )
        
        text_to_translate = ""
        
        if input_method == "Upload file":
            uploaded_file = st.file_uploader(
                "Ch·ªçn file ƒë·ªÉ d·ªãch:",
                type=['txt', 'md', 'pdf'],
                help="H·ªó tr·ª£ file .txt, .md, .pdf"
            )
            
            if uploaded_file is not None:
                text_to_translate = read_file_content(uploaded_file)
                if text_to_translate:
                    st.success(f"‚úÖ ƒê√£ ƒë·ªçc file: {uploaded_file.name}")
                    with st.expander("Xem n·ªôi dung file"):
                        st.text(text_to_translate[:1000] + "..." if len(text_to_translate) > 1000 else text_to_translate)
        
        else:
            text_to_translate = st.text_area(
                "Nh·∫≠p vƒÉn b·∫£n ti·∫øng Anh:",
                placeholder="Nh·∫≠p vƒÉn b·∫£n c·∫ßn d·ªãch...",
                height=300
            )
        
        # Process keywords
        global_keywords = {}
        if keywords_input.strip():
            try:
                for line in keywords_input.strip().split('\n'):
                    if ':' in line:
                        en, vi = line.split(':', 1)
                        global_keywords[en.strip()] = vi.strip()
            except Exception as e:
                st.error(f"L·ªói parse t·ª´ kh√≥a: {e}")
    
    with col2:
        st.subheader("üéØ K·∫øt qu·∫£ d·ªãch")
        
        if st.session_state.chatbot is None:
            st.warning("‚ö†Ô∏è Vui l√≤ng kh·ªüi t·∫°o chatbot tr∆∞·ªõc!")
        elif not text_to_translate:
            st.info("üìù Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ho·∫∑c upload file ƒë·ªÉ b·∫Øt ƒë·∫ßu d·ªãch")
        else:
            if st.button("üöÄ B·∫Øt ƒë·∫ßu d·ªãch", type="primary"):
                # Initialize session state for results
                if 'translation_results' not in st.session_state:
                    st.session_state.translation_results = {
                        'all_chunks': [],
                        'final_translation': "",
                        'final_keywords': {},
                        'is_completed': False
                    }
                
                # Reset results for new translation
                st.session_state.translation_results = {
                    'all_chunks': [],
                    'final_translation': "",
                    'final_keywords': {},
                    'is_completed': False
                }
                
                # Create containers for streaming results
                progress_container = st.container()
                
                with progress_container:
                    progress_bar = st.progress(0)
                    progress_text = st.empty()
                    keywords_display = st.empty()
                
                try:
                    # Start translation
                    for result in st.session_state.chatbot.stream_translate(
                        text=text_to_translate,
                        chunk_size=chunk_size,
                        domain=domain,
                        style=style,
                        kw=global_keywords
                    ):
                        if 'translated_chunk' in result:
                            # Update progress
                            progress = result['progress']
                            total_chunks = result['total_chunks']
                            progress_percentage = progress / total_chunks
                            
                            progress_bar.progress(progress_percentage)
                            progress_text.markdown(f"""
                            <div class="progress-info">
                                <strong>ƒêang d·ªãch chunk {progress}/{total_chunks}</strong>
                                <br>Ti·∫øn ƒë·ªô: {progress_percentage:.1%}
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # Add chunk to results
                            chunk_info = {
                                'original': result['original_chunk'],
                                'translated': result['translated_chunk'],
                                'keywords': result.get('keywords', {}),
                                'chunk_number': progress
                            }
                            st.session_state.translation_results['all_chunks'].append(chunk_info)
                            
                            # Display current keywords
                            if result.get('keywords'):
                                with keywords_display:
                                    display_keywords(result['keywords'], f"T·ª´ kh√≥a m·ªõi (Chunk {progress})")
                        
                        elif 'final_translation' in result:
                            st.session_state.translation_results['final_translation'] = result['final_translation']
                            st.session_state.translation_results['final_keywords'] = result.get('global_keywords', {})
                            st.session_state.translation_results['is_completed'] = True
                    
                    # Display final results
                    progress_bar.progress(1.0)
                    progress_text.markdown("""
                    <div class="progress-info">
                        <strong>‚úÖ Ho√†n th√†nh d·ªãch!</strong>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Save to history
                    st.session_state.translation_history.append({
                        'original': text_to_translate[:100] + "..." if len(text_to_translate) > 100 else text_to_translate,
                        'translated': st.session_state.translation_results['final_translation'],
                        'keywords': st.session_state.translation_results['final_keywords'],
                        'settings': {
                            'model': model_option,
                            'domain': domain,
                            'style': style,
                            'chunk_size': chunk_size
                        }
                    })
                    
                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh d·ªãch: {str(e)}")
                    st.exception(e)

    # Display results in tabs (only if translation is completed)
    if 'translation_results' in st.session_state and st.session_state.translation_results['is_completed']:
        st.markdown("---")
        
        # Create tabs for different views
        tab1, tab2, tab3 = st.tabs(["üìù B·∫£n d·ªãch ho√†n ch·ªânh", "üîç Theo t·ª´ng Chunk", "üîë T·ª´ kh√≥a & T·∫£i xu·ªëng"])
        
        with tab1:
            st.subheader("üìã B·∫£n d·ªãch ho√†n ch·ªânh")
            
            # Display original text
            with st.expander("üëÄ Xem vƒÉn b·∫£n g·ªëc", expanded=False):
                st.text_area("VƒÉn b·∫£n ti·∫øng Anh:", value=text_to_translate, height=200, disabled=True)
            
            # Display translated text
            st.markdown("**B·∫£n d·ªãch:**")
            st.markdown(f"""
            <div class="translation-container">
                {st.session_state.translation_results['final_translation'].replace(chr(10), '<br>')}
            </div>
            """, unsafe_allow_html=True)
            
            # Copy to clipboard button (using text area)
            st.text_area(
                "Sao ch√©p b·∫£n d·ªãch:",
                value=st.session_state.translation_results['final_translation'],
                height=300,
                key="copy_translation"
            )
        
        with tab2:
            st.subheader("üîç D·ªãch theo t·ª´ng Chunk")
            
            if st.session_state.translation_results['all_chunks']:
                for i, chunk in enumerate(st.session_state.translation_results['all_chunks']):
                    with st.expander(f"Chunk {chunk['chunk_number']} ({len(chunk['original'])} k√Ω t·ª±)", expanded=False):
                        col_orig, col_trans = st.columns([1, 1])
                        
                        with col_orig:
                            st.markdown("**VƒÉn b·∫£n g·ªëc:**")
                            st.markdown(f"""
                            <div style="background-color: #f0f0f0; padding: 1rem; border-radius: 5px; max-height: 300px; overflow-y: auto; color: #1a1a1a;">
                                {chunk['original'].replace(chr(10), '<br>')}
                            </div>
                            """, unsafe_allow_html=True)
                        
                        with col_trans:
                            st.markdown("**B·∫£n d·ªãch:**")
                            st.markdown(f"""
                            <div style="background-color: #e8f5e8; padding: 1rem; border-radius: 5px; max-height: 300px; overflow-y: auto; color: #1a1a1a;">
                                {chunk['translated'].replace(chr(10), '<br>')}
                            </div>
                            """, unsafe_allow_html=True)
                        
                        # Show keywords for this chunk
                        if chunk['keywords']:
                            st.markdown("**T·ª´ kh√≥a trong chunk n√†y:**")
                            display_keywords(chunk['keywords'], "")
            else:
                st.info("Ch∆∞a c√≥ chunk n√†o ƒë∆∞·ª£c d·ªãch.")
        
        with tab3:
            st.subheader("üîë T·ª´ kh√≥a & T·∫£i xu·ªëng")
            
            # Display all keywords
            if st.session_state.translation_results['final_keywords']:
                display_keywords(st.session_state.translation_results['final_keywords'], "T·∫•t c·∫£ t·ª´ kh√≥a ƒë√£ s·ª≠ d·ª•ng")
                
                # Export keywords
                keywords_text = "\n".join([f"{en}: {vi}" for en, vi in st.session_state.translation_results['final_keywords'].items()])
                st.download_button(
                    label="üì• T·∫£i xu·ªëng t·ª´ kh√≥a",
                    data=keywords_text,
                    file_name="keywords.txt",
                    mime="text/plain"
                )
            else:
                st.info("Kh√¥ng c√≥ t·ª´ kh√≥a n√†o ƒë∆∞·ª£c ghi nh·∫≠n.")
            
            st.markdown("---")
            
            # Download options
            st.subheader("üíæ T·∫£i xu·ªëng")
            
            col_download1, col_download2 = st.columns([1, 1])
            
            with col_download1:
                st.download_button(
                    label="üìÑ T·∫£i xu·ªëng b·∫£n d·ªãch",
                    data=st.session_state.translation_results['final_translation'],
                    file_name="translation.txt",
                    mime="text/plain"
                )
            
            with col_download2:
                # Create combined report
                report_content = f"""B√ÅO C√ÅO D·ªäCH THU·∫¨T
{'='*50}

VƒÇN B·∫¢N G·ªêC:
{text_to_translate}

{'='*50}

B·∫¢N D·ªäCH:
{st.session_state.translation_results['final_translation']}

{'='*50}

T·ª™ KH√ìA S·ª¨ D·ª§NG:
{chr(10).join([f"- {en}: {vi}" for en, vi in st.session_state.translation_results['final_keywords'].items()])}

{'='*50}

C√ÄI ƒê·∫∂T:
- Model: {model_option}
- Domain: {domain}
- Style: {style}
- Chunk size: {chunk_size}
"""
                
                st.download_button(
                    label="üìã T·∫£i xu·ªëng b√°o c√°o ƒë·∫ßy ƒë·ªß",
                    data=report_content,
                    file_name="translation_report.txt",
                    mime="text/plain"
                )

    # Translation history
    if st.session_state.translation_history:
        st.subheader("üìö L·ªãch s·ª≠ d·ªãch")
        with st.expander("Xem l·ªãch s·ª≠ d·ªãch"):
            for i, item in enumerate(reversed(st.session_state.translation_history)):
                st.markdown(f"""
                **L·∫ßn d·ªãch #{len(st.session_state.translation_history) - i}**
                - G·ªëc: {item['original']}
                - C√†i ƒë·∫∑t: {item['settings']['model']} | {item['settings']['domain']} | {item['settings']['style']}
                """)
                with st.expander(f"Xem chi ti·∫øt l·∫ßn d·ªãch #{len(st.session_state.translation_history) - i}"):
                    st.text_area("B·∫£n d·ªãch:", value=item['translated'], height=200, key=f"history_{i}")
                    if item['keywords']:
                        display_keywords(item['keywords'], "T·ª´ kh√≥a")

if __name__ == "__main__":
    main()